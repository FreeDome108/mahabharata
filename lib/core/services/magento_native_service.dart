import 'dart:async';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:flutter_magento/flutter_magento.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:device_info_plus/device_info_plus.dart';

/// –ú–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–∫—É–ø–æ–∫
class Episode {
  final String id;
  final String name;
  final String description;
  final String image;
  final double price;
  final String currency;
  final bool isPurchased;
  final String seasonId;
  final int order;
  final String? audioUrl;
  final String? videoUrl;
  final DateTime? releaseDate;

  Episode({
    required this.id,
    required this.name,
    required this.description,
    required this.image,
    required this.price,
    required this.currency,
    required this.isPurchased,
    required this.seasonId,
    required this.order,
    this.audioUrl,
    this.videoUrl,
    this.releaseDate,
  });

  factory Episode.fromJson(Map<String, dynamic> json) {
    return Episode(
      id: json['id']?.toString() ?? '',
      name: json['name'] ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      description: json['description'] ?? '',
      image: json['image'] ?? '',
      price: (json['price'] ?? 0.0).toDouble(),
      currency: json['currency'] ?? 'USD',
      isPurchased: json['is_purchased'] ?? false,
      seasonId: json['season_id']?.toString() ?? '',
      order: json['order'] ?? 0,
      audioUrl: json['audio_url'],
      videoUrl: json['video_url'],
      releaseDate: json['release_date'] != null
          ? DateTime.parse(json['release_date'])
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'description': description,
      'image': image,
      'price': price,
      'currency': currency,
      'is_purchased': isPurchased,
      'season_id': seasonId,
      'order': order,
      'audio_url': audioUrl,
      'video_url': videoUrl,
      'release_date': releaseDate?.toIso8601String(),
    };
  }
}

class Season {
  final String id;
  final String name;
  final String description;
  final String image;
  final double price;
  final String currency;
  final bool isPurchased;
  final List<Episode> episodes;
  final int order;
  final DateTime? releaseDate;

  Season({
    required this.id,
    required this.name,
    required this.description,
    required this.image,
    required this.price,
    required this.currency,
    required this.isPurchased,
    required this.episodes,
    required this.order,
    this.releaseDate,
  });

  factory Season.fromJson(Map<String, dynamic> json) {
    return Season(
      id: json['id']?.toString() ?? '',
      name: json['name'] ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      description: json['description'] ?? '',
      image: json['image'] ?? '',
      price: (json['price'] ?? 0.0).toDouble(),
      currency: json['currency'] ?? 'USD',
      isPurchased: json['is_purchased'] ?? false,
      episodes: (json['episodes'] as List<dynamic>?)
              ?.map((e) => Episode.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      order: json['order'] ?? 0,
      releaseDate: json['release_date'] != null
          ? DateTime.parse(json['release_date'])
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'description': description,
      'image': image,
      'price': price,
      'currency': currency,
      'is_purchased': isPurchased,
      'episodes': episodes.map((e) => e.toJson()).toList(),
      'order': order,
      'release_date': releaseDate?.toIso8601String(),
    };
  }
}

class PurchaseResult {
  final bool success;
  final String? orderId;
  final String? paymentUrl;
  final String? error;
  final Map<String, dynamic>? data;

  PurchaseResult({
    required this.success,
    this.orderId,
    this.paymentUrl,
    this.error,
    this.data,
  });

  factory PurchaseResult.fromJson(Map<String, dynamic> json) {
    return PurchaseResult(
      success: json['success'] ?? false,
      orderId: json['order_id'],
      paymentUrl: json['payment_url'],
      error: json['error'],
      data: json['data'],
    );
  }
}

/// –ù–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å Magento —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–æ–∫—É–ø–æ–∫
class MagentoNativeService {
  static MagentoNativeService? _instance;
  static MagentoNativeService get instance =>
      _instance ??= MagentoNativeService._();

  MagentoNativeService._();

  // Flutter Magento –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
  MagentoProvider? _magentoProvider;
  AuthProvider? _authProvider;

  // –ù–∞—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
  static const MethodChannel _anantaSoundChannel =
      MethodChannel('anantasound_service');
  static const MethodChannel _magentoNativeChannel =
      MethodChannel('magento_native_service');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  bool _isInitialized = false;
  bool _isCloudEnabled = false;
  String? _baseUrl;
  DeviceInfoPlugin _deviceInfo = DeviceInfoPlugin();

  // –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
  List<Season> _seasons = [];
  List<Episode> _episodes = [];
  Map<String, bool> _purchaseStatus = {};

  // –°—Ç—Ä–∏–º—ã
  final StreamController<List<Season>> _seasonsController =
      StreamController<List<Season>>.broadcast();
  final StreamController<List<Episode>> _episodesController =
      StreamController<List<Episode>>.broadcast();
  final StreamController<Map<String, dynamic>> _purchaseController =
      StreamController<Map<String, dynamic>>.broadcast();

  // Getters
  bool get isInitialized => _isInitialized;
  bool get isCloudEnabled => _isCloudEnabled;
  bool get isConnected => _magentoProvider?.isConnected ?? false;
  bool get isAuthenticated => _authProvider?.isAuthenticated ?? false;
  List<Season> get seasons => _seasons;
  List<Episode> get episodes => _episodes;

  Stream<List<Season>> get seasonsStream => _seasonsController.stream;
  Stream<List<Episode>> get episodesStream => _episodesController.stream;
  Stream<Map<String, dynamic>> get purchaseStream => _purchaseController.stream;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize({
    String? baseUrl,
    List<String> supportedLanguages = const ['en', 'ru', 'hi', 'sa'],
  }) async {
    try {
      debugPrint('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MagentoNativeService —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–∫—É–ø–æ–∫...');

      final prefs = await SharedPreferences.getInstance();
      _isCloudEnabled = prefs.getBool('cloud_enabled') ?? false;
      _baseUrl = baseUrl ?? prefs.getString('magento_base_url');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
      await _initializeNativeChannels();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AnantaSound
      await _initializeAnantaSound();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Magento
      if (_isCloudEnabled && _baseUrl != null) {
        await _initializeMagentoProvider(
          baseUrl: _baseUrl!,
          supportedLanguages: supportedLanguages,
        );

        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∫—É–ø–∫–∞—Ö
        await _loadPurchaseStatus();
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
      await _initializeDeviceInfo();

      _isInitialized = true;
      debugPrint('‚úÖ MagentoNativeService —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–∫—É–ø–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MagentoNativeService: $e');
      _isInitialized = true; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –æ–±–ª–∞—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
  Future<void> _initializeNativeChannels() async {
    try {
      _anantaSoundChannel.setMethodCallHandler(_handleAnantaSoundCall);
      _magentoNativeChannel.setMethodCallHandler(_handleMagentoNativeCall);

      debugPrint('üì± –ù–∞—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: $e');
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AnantaSound —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª
  Future<void> _initializeAnantaSound() async {
    try {
      final result = await _anantaSoundChannel.invokeMethod('initialize', {
        'domeRadius': 10.0,
        'domeHeight': 5.0,
        'quantumUncertainty': 0.1,
      });

      if (result['success'] == true) {
        debugPrint('üéµ AnantaSound –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª');
        _startAnantaSoundMonitoring();
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AnantaSound: $e');
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MagentoProvider
  Future<void> _initializeMagentoProvider({
    required String baseUrl,
    required List<String> supportedLanguages,
  }) async {
    try {
      _magentoProvider = MagentoProvider();

      await _magentoProvider!.initialize(
        baseUrl: baseUrl,
        supportedLanguages: supportedLanguages,
        connectionTimeout: 30000,
        receiveTimeout: 30000,
        headers: {
          'X-API-Key': 'mahabharata-native-client',
          'X-Store-Code': 'default',
          'X-Device-Info': await _getDeviceInfo(),
        },
      );

      _authProvider = AuthProvider(_magentoProvider!.auth);

      debugPrint('üõçÔ∏è MagentoProvider —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–∫—É–ø–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MagentoProvider: $e');
      _magentoProvider = null;
      rethrow;
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
  Future<void> _initializeDeviceInfo() async {
    try {
      if (defaultTargetPlatform == TargetPlatform.android) {
        final androidInfo = await _deviceInfo.androidInfo;
        debugPrint(
            'üì± Android Device: ${androidInfo.model} (${androidInfo.version.release})');
      } else if (defaultTargetPlatform == TargetPlatform.iOS) {
        final iosInfo = await _deviceInfo.iosInfo;
        debugPrint(
            'üì± iOS Device: ${iosInfo.model} (${iosInfo.systemVersion})');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: $e');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –¥–ª—è API
  Future<String> _getDeviceInfo() async {
    try {
      if (defaultTargetPlatform == TargetPlatform.android) {
        final androidInfo = await _deviceInfo.androidInfo;
        return jsonEncode({
          'platform': 'android',
          'model': androidInfo.model,
          'version': androidInfo.version.release,
          'sdk': androidInfo.version.sdkInt,
          'brand': androidInfo.brand,
          'manufacturer': androidInfo.manufacturer,
        });
      } else if (defaultTargetPlatform == TargetPlatform.iOS) {
        final iosInfo = await _deviceInfo.iosInfo;
        return jsonEncode({
          'platform': 'ios',
          'model': iosInfo.model,
          'version': iosInfo.systemVersion,
          'name': iosInfo.name,
          'localizedModel': iosInfo.localizedModel,
          'identifierForVendor': iosInfo.identifierForVendor,
        });
      }
      return jsonEncode({'platform': 'unknown'});
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: $e');
      return jsonEncode({'platform': 'error'});
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∫—É–ø–æ–∫
  Future<void> _loadPurchaseStatus() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final purchaseData = prefs.getString('purchase_status');

      if (purchaseData != null) {
        final Map<String, dynamic> data = jsonDecode(purchaseData);
        _purchaseStatus = Map<String, bool>.from(data);
        debugPrint(
            'üí∞ –°—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω: ${_purchaseStatus.length} –∑–∞–ø–∏—Å–µ–π');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∫—É–ø–æ–∫: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∫—É–ø–æ–∫
  Future<void> _savePurchaseStatus() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('purchase_status', jsonEncode(_purchaseStatus));
      debugPrint('üí∞ –°—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∫—É–ø–æ–∫: $e');
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–æ–≤ AnantaSound
  Future<dynamic> _handleAnantaSoundCall(MethodCall call) async {
    switch (call.method) {
      case 'onStatisticsUpdate':
        final stats = Map<String, dynamic>.from(call.arguments);
        _purchaseController.add({'type': 'ananta_stats', 'data': stats});
        return {'success': true};

      case 'onFieldsUpdate':
        final fields = List<Map<String, dynamic>>.from(call.arguments);
        _purchaseController.add({'type': 'fields_update', 'data': fields});
        return {'success': true};

      case 'onQuantumEvent':
        final event = Map<String, dynamic>.from(call.arguments);
        _purchaseController.add({'type': 'quantum_event', 'data': event});
        return {'success': true};

      default:
        throw PlatformException(
          code: 'UNIMPLEMENTED',
          message: 'MagentoNativeService –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ—Ç–æ–¥ ${call.method}',
        );
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–æ–≤ Magento Native
  Future<dynamic> _handleMagentoNativeCall(MethodCall call) async {
    switch (call.method) {
      case 'processPayment':
        final paymentData = Map<String, dynamic>.from(call.arguments);
        return await _processPaymentNative(paymentData);

      case 'downloadEpisode':
        final episodeData = Map<String, dynamic>.from(call.arguments);
        return await _downloadEpisodeNative(episodeData);

      case 'getDeviceCapabilities':
        return await _getDeviceCapabilities();

      case 'performQuantumSync':
        return await _performQuantumSync();

      default:
        throw PlatformException(
          code: 'UNIMPLEMENTED',
          message: 'MagentoNativeService –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ—Ç–æ–¥ ${call.method}',
        );
    }
  }

  /// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ AnantaSound
  void _startAnantaSoundMonitoring() {
    Timer.periodic(const Duration(seconds: 2), (timer) async {
      try {
        final stats = await _anantaSoundChannel.invokeMethod('getStatistics');
        if (stats != null) {
          final statistics = Map<String, dynamic>.from(stats);
          _purchaseController.add({'type': 'ananta_stats', 'data': statistics});
        }
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AnantaSound: $e');
      }
    });
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª
  Future<Map<String, dynamic>> _processPaymentNative(
      Map<String, dynamic> paymentData) async {
    try {
      final productId = paymentData['product_id'] as String;
      final productType =
          paymentData['product_type'] as String; // 'season' –∏–ª–∏ 'episode'
      final amount = paymentData['amount'] as double;
      final currency = paymentData['currency'] as String;

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏ AnantaSound
      final enhancedData = {
        ...paymentData,
        'device_info': await _getDeviceInfo(),
        'ananta_sound_stats': await _getAnantaSoundStats(),
        'timestamp': DateTime.now().millisecondsSinceEpoch,
      };

      if (_magentoProvider != null && isAuthenticated) {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ Magento
        final orderResponse = await _magentoProvider!.dio.post(
          '/rest/V1/mahabharata/orders/create',
          data: enhancedData,
        );

        if (orderResponse.statusCode == 200) {
          final orderData = orderResponse.data;
          final orderId = orderData['order_id'];

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
          final paymentResponse = await _magentoProvider!.dio.post(
            '/rest/V1/mahabharata/payments/process',
            data: {
              'order_id': orderId,
              'payment_method': paymentData['payment_method'] ?? 'card',
              'amount': amount,
              'currency': currency,
            },
          );

          if (paymentResponse.statusCode == 200) {
            final paymentResult = paymentResponse.data;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏
            _purchaseStatus[productId] = true;
            await _savePurchaseStatus();

            debugPrint('üí≥ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª: $productId');
            return {
              'success': true,
              'order_id': orderId,
              'payment_result': paymentResult,
            };
          }
        }
      }

      return {'success': false, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂'};
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: $e');
      return {'success': false, 'error': e.toString()};
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —ç–ø–∏–∑–æ–¥–∞ —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª
  Future<Map<String, dynamic>> _downloadEpisodeNative(
      Map<String, dynamic> episodeData) async {
    try {
      final cloudId = episodeData['cloud_id'] as String;
      final localPath = episodeData['local_path'] as String;

      // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      final downloadUrl = await _getDownloadUrl(cloudId);

      if (downloadUrl != null) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        final result =
            await _magentoNativeChannel.invokeMethod('downloadFile', {
          'url': downloadUrl,
          'localPath': localPath,
          'cloudId': cloudId,
        });

        debugPrint('üì• –≠–ø–∏–∑–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª: $cloudId');
        return result;
      }

      return {
        'success': false,
        'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏'
      };
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ø–∏–∑–æ–¥–∞: $e');
      return {'success': false, 'error': e.toString()};
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  Future<Map<String, dynamic>> _getDeviceCapabilities() async {
    try {
      final capabilities = {
        'platform': defaultTargetPlatform.name,
        'device_info': await _getDeviceInfo(),
        'ananta_sound_available': await _checkAnantaSoundAvailability(),
        'quantum_computing': await _checkQuantumComputingSupport(),
        'dome_rendering': await _checkDomeRenderingSupport(),
        'spatial_audio': await _checkSpatialAudioSupport(),
        'payment_support': await _checkPaymentSupport(),
      };

      return {'success': true, 'capabilities': capabilities};
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: $e');
      return {'success': false, 'error': e.toString()};
    }
  }

  /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<Map<String, dynamic>> _performQuantumSync() async {
    try {
      // –°–æ–∑–¥–∞–µ–º –∫–≤–∞–Ω—Ç–æ–≤–æ–µ –∑–≤—É–∫–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      final quantumField =
          await _anantaSoundChannel.invokeMethod('createQuantumSoundField', {
        'frequency': 440.0,
        'position': {
          'r': 5.0,
          'theta': 0.0,
          'phi': 0.0,
          'height': 2.5,
        },
        'state': 'entangled',
      });

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      final quantumStats = await _getAnantaSoundStats();

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Magento
      if (_magentoProvider != null) {
        final response = await _magentoProvider!.dio.post(
          '/rest/V1/mahabharata/quantum-sync',
          data: {
            'quantum_field': quantumField,
            'quantum_stats': quantumStats,
            'sync_timestamp': DateTime.now().millisecondsSinceEpoch,
          },
        );

        if (response.statusCode == 200) {
          debugPrint('üåå –ö–≤–∞–Ω—Ç–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
          return {'success': true, 'data': response.data};
        }
      }

      return {
        'success': false,
        'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–≤–∞–Ω—Ç–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é'
      };
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return {'success': false, 'error': e.toString()};
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AnantaSound
  Future<Map<String, dynamic>> _getAnantaSoundStats() async {
    try {
      final stats = await _anantaSoundChannel.invokeMethod('getStatistics');
      return Map<String, dynamic>.from(stats ?? {});
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AnantaSound: $e');
      return {};
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AnantaSound
  Future<bool> _checkAnantaSoundAvailability() async {
    try {
      final result = await _anantaSoundChannel.invokeMethod('isAvailable');
      return result == true;
    } catch (e) {
      return false;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
  Future<bool> _checkQuantumComputingSupport() async {
    try {
      final result =
          await _magentoNativeChannel.invokeMethod('checkQuantumSupport');
      return result == true;
    } catch (e) {
      return false;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫—É–ø–æ–ª—å–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  Future<bool> _checkDomeRenderingSupport() async {
    try {
      final result =
          await _magentoNativeChannel.invokeMethod('checkDomeSupport');
      return result == true;
    } catch (e) {
      return false;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
  Future<bool> _checkSpatialAudioSupport() async {
    try {
      final result =
          await _magentoNativeChannel.invokeMethod('checkSpatialAudio');
      return result == true;
    } catch (e) {
      return false;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
  Future<bool> _checkPaymentSupport() async {
    try {
      final result =
          await _magentoNativeChannel.invokeMethod('checkPaymentSupport');
      return result == true;
    } catch (e) {
      return false;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  Future<String?> _getDownloadUrl(String cloudId) async {
    if (_magentoProvider == null) return null;

    try {
      final response = await _magentoProvider!.dio
          .get('/rest/V1/mahabharata/episode/$cloudId/download');

      if (response.statusCode == 200 && response.data != null) {
        return response.data['download_url'] as String?;
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: $e');
    }

    return null;
  }

  /// –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å UI

  /// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<bool> authenticateUser({
    required String email,
    required String password,
    bool rememberMe = true,
  }) async {
    if (!_isCloudEnabled || _authProvider == null) {
      return false;
    }

    try {
      final success = await _authProvider!.authenticate(
        email: email,
        password: password,
        rememberMe: rememberMe,
      );

      if (success) {
        debugPrint('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å');
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await loadSeasons();
      }

      return success;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $e');
      return false;
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∑–æ–Ω–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∫—É–ø–∫–∞—Ö
  Future<List<Season>?> loadSeasons() async {
    if (!_isCloudEnabled || _magentoProvider == null) {
      return null;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–≤–∞–Ω—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      final quantumStats = await _getAnantaSoundStats();

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤
      final products = await _magentoProvider!.searchProducts(
        query: '',
        filters: {'type_id': 'mahabharata_season'},
        page: 1,
        pageSize: 100,
        sortBy: 'order',
        sortOrder: 'asc',
      );

      final seasons = <Season>[];

      for (final product in products.items) {
        final seasonId = product.id.toString();
        final isPurchased = _purchaseStatus[seasonId] ?? false;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–ø–∏–∑–æ–¥—ã –¥–ª—è —Å–µ–∑–æ–Ω–∞
        final episodes = await _loadEpisodesForSeason(seasonId);

        final season = Season(
          id: seasonId,
          name: product.name,
          description: product.description ?? '',
          image: _getProductImage(product),
          price: (product.price ?? 0.0).toDouble(),
          currency: 'USD',
          isPurchased: isPurchased,
          episodes: episodes,
          order: _getCustomAttribute(product, 'order') ?? 0,
          releaseDate: DateTime.tryParse(product.createdAt ?? ''),
        );

        seasons.add(season);
      }

      _seasons = seasons;
      _seasonsController.add(seasons);

      debugPrint(
          'üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${seasons.length} —Å–µ–∑–æ–Ω–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∫—É–ø–∫–∞—Ö');
      return seasons;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∑–æ–Ω–æ–≤: $e');
      return null;
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —ç–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è —Å–µ–∑–æ–Ω–∞
  Future<List<Episode>> _loadEpisodesForSeason(String seasonId) async {
    try {
      final products = await _magentoProvider!.searchProducts(
        query: '',
        filters: {
          'type_id': 'mahabharata_episode',
          'season_id': seasonId,
        },
        page: 1,
        pageSize: 100,
        sortBy: 'order',
        sortOrder: 'asc',
      );

      final episodes = <Episode>[];

      for (final product in products.items) {
        final episodeId = product.id.toString();
        final isPurchased = _purchaseStatus[episodeId] ?? false;

        final episode = Episode(
          id: episodeId,
          name: product.name,
          description: product.description ?? '',
          image: _getProductImage(product),
          price: (product.price ?? 0.0).toDouble(),
          currency: 'USD',
          isPurchased: isPurchased,
          seasonId: seasonId,
          order: _getCustomAttribute(product, 'order') ?? 0,
          audioUrl: _getCustomAttribute(product, 'audio_url'),
          videoUrl: _getCustomAttribute(product, 'video_url'),
          releaseDate: DateTime.tryParse(product.createdAt ?? ''),
        );

        episodes.add(episode);
      }

      return episodes;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è —Å–µ–∑–æ–Ω–∞ $seasonId: $e');
      return [];
    }
  }

  /// –ü–æ–∫—É–ø–∫–∞ —Å–µ–∑–æ–Ω–∞
  Future<PurchaseResult> purchaseSeason(String seasonId) async {
    try {
      final season = _seasons.firstWhere((s) => s.id == seasonId);

      if (season.isPurchased) {
        return PurchaseResult(
          success: true,
          error: '–°–µ–∑–æ–Ω —É–∂–µ –∫—É–ø–ª–µ–Ω',
        );
      }

      final paymentData = {
        'product_id': seasonId,
        'product_type': 'season',
        'amount': season.price,
        'currency': season.currency,
        'payment_method': 'card',
        'product_name': season.name,
      };

      final result = await _magentoNativeChannel.invokeMethod(
          'processPayment', paymentData);

      if (result['success'] == true) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏
        _purchaseStatus[seasonId] = true;
        await _savePurchaseStatus();

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await loadSeasons();

        _purchaseController.add({
          'type': 'purchase_success',
          'product_type': 'season',
          'product_id': seasonId,
          'data': result,
        });

        debugPrint('üí∞ –°–µ–∑–æ–Ω –∫—É–ø–ª–µ–Ω: ${season.name}');

        return PurchaseResult.fromJson(result);
      } else {
        return PurchaseResult(
          success: false,
          error: result['error'] ?? '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏',
        );
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å–µ–∑–æ–Ω–∞: $e');
      return PurchaseResult(
        success: false,
        error: e.toString(),
      );
    }
  }

  /// –ü–æ–∫—É–ø–∫–∞ —ç–ø–∏–∑–æ–¥–∞
  Future<PurchaseResult> purchaseEpisode(String episodeId) async {
    try {
      Episode? episode;
      for (final season in _seasons) {
        episode = season.episodes.firstWhere(
          (e) => e.id == episodeId,
          orElse: () => throw StateError('Episode not found'),
        );
        if (episode != null) break;
      }

      if (episode == null) {
        return PurchaseResult(
          success: false,
          error: '–≠–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω',
        );
      }

      if (episode.isPurchased) {
        return PurchaseResult(
          success: true,
          error: '–≠–ø–∏–∑–æ–¥ —É–∂–µ –∫—É–ø–ª–µ–Ω',
        );
      }

      final paymentData = {
        'product_id': episodeId,
        'product_type': 'episode',
        'amount': episode.price,
        'currency': episode.currency,
        'payment_method': 'card',
        'product_name': episode.name,
        'season_id': episode.seasonId,
      };

      final result = await _magentoNativeChannel.invokeMethod(
          'processPayment', paymentData);

      if (result['success'] == true) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏
        _purchaseStatus[episodeId] = true;
        await _savePurchaseStatus();

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await loadSeasons();

        _purchaseController.add({
          'type': 'purchase_success',
          'product_type': 'episode',
          'product_id': episodeId,
          'data': result,
        });

        debugPrint('üí∞ –≠–ø–∏–∑–æ–¥ –∫—É–ø–ª–µ–Ω: ${episode.name}');

        return PurchaseResult.fromJson(result);
      } else {
        return PurchaseResult(
          success: false,
          error: result['error'] ?? '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏',
        );
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —ç–ø–∏–∑–æ–¥–∞: $e');
      return PurchaseResult(
        success: false,
        error: e.toString(),
      );
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∫—É–ø–∫–∏
  bool isPurchased(String productId) {
    return _purchaseStatus[productId] ?? false;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
  String? _getProductImage(dynamic product) {
    try {
      if (product.mediaGalleryEntries != null &&
          product.mediaGalleryEntries.isNotEmpty) {
        return product.mediaGalleryEntries.first.file;
      }
      return null;
    } catch (e) {
      return null;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
  dynamic _getCustomAttribute(dynamic product, String attributeCode) {
    try {
      if (product.customAttributes != null) {
        for (final attr in product.customAttributes) {
          if (attr.attributeCode == attributeCode) {
            return attr.value;
          }
        }
      }
      return null;
    } catch (e) {
      return null;
    }
  }

  /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  Future<void> dispose() async {
    await _seasonsController.close();
    await _episodesController.close();
    await _purchaseController.close();

    _magentoProvider = null;
    _authProvider = null;
    _isInitialized = false;

    debugPrint('üõë MagentoNativeService –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}
