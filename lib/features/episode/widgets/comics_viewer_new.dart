import 'package:flutter/material.dart';
import 'package:flutter_freedome_player/flutter_freedome_player.dart';

/// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∏–∫—Å–æ–≤ —á–µ—Ä–µ–∑ FreeDome Player
class ComicsViewerNew extends StatefulWidget {
  final String comicsFilePath;
  final String episodeTitle;

  const ComicsViewerNew({
    super.key,
    required this.comicsFilePath,
    required this.episodeTitle,
  });

  @override
  State<ComicsViewerNew> createState() => _ComicsViewerNewState();
}

class _ComicsViewerNewState extends State<ComicsViewerNew> {
  late FreeDomePlayerController _controller;
  final FreeDomePlayer _player = FreeDomePlayer();

  @override
  void initState() {
    super.initState();
    _initializePlayer();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  Future<void> _initializePlayer() async {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–º–∏–∫—Å–∞
    final content = FreeDomePlayer.createMediaContent(
      filePath: widget.comicsFilePath,
      name: widget.episodeTitle,
      format: MediaFormat.comics,
      description: 'Mahabharata Episode Comics',
      author: 'Igor Baranko & Alexey Chebykin',
      playbackMode: PlaybackMode.screen,
    );

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∫–æ–º–∏–∫—Å–æ–≤
    final config = PlayerConfig.defaultComics.copyWith(
      backgroundColor: 0xFF000000,
      renderQuality: 1.0,
    );

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
    _controller = _player.createController(config);
    _controller.loadMediaContent(content);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          // FreeDome Player –¥–ª—è –∫–æ–º–∏–∫—Å–æ–≤
          FreeDomePlayerWidget(
            content: _controller.currentContent,
            config: _controller.config,
            showControls: true,
            autoPlay: false,
            onContentLoaded: () {
              debugPrint(
                  'üü¢ [COMICS_VIEWER_NEW] Comics loaded: ${widget.episodeTitle}');
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content:
                      Text('–ö–æ–º–∏–∫—Å "${widget.episodeTitle}" –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!'),
                  backgroundColor: Colors.green,
                  duration: const Duration(seconds: 2),
                ),
              );
            },
            onError: (error) {
              debugPrint('üî¥ [COMICS_VIEWER_NEW] Error: $error');
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∏–∫—Å–∞: $error'),
                  backgroundColor: Colors.red,
                ),
              );
            },
            onPlaybackStarted: () {
              debugPrint('üü¢ [COMICS_VIEWER_NEW] Playback started');
            },
            onPlaybackStopped: () {
              debugPrint('üî¥ [COMICS_VIEWER_NEW] Playback stopped');
            },
          ),

          // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
          Positioned(
            top: 50,
            left: 16,
            child: Container(
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.7),
                borderRadius: BorderRadius.circular(25),
              ),
              child: IconButton(
                onPressed: () => Navigator.of(context).pop(),
                icon: const Icon(Icons.arrow_back, color: Colors.white),
                tooltip: '–ù–∞–∑–∞–¥ –∫ —ç–ø–∏–∑–æ–¥–∞–º',
              ),
            ),
          ),

          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–ø–∏–∑–æ–¥–µ
          Positioned(
            top: 50,
            right: 16,
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
              decoration: BoxDecoration(
                color: Colors.orange.withOpacity(0.8),
                borderRadius: BorderRadius.circular(20),
              ),
              child: const Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Icon(Icons.menu_book, color: Colors.white, size: 16),
                  SizedBox(width: 6),
                  Text(
                    'Comics',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 14,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
            ),
          ),

          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          Positioned(
            top: 100,
            right: 16,
            child: Column(
              children: [
                // –ö–Ω–æ–ø–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                Container(
                  decoration: BoxDecoration(
                    color: Colors.black.withOpacity(0.7),
                    borderRadius: BorderRadius.circular(25),
                  ),
                  child: IconButton(
                    onPressed: _showEpisodeInfo,
                    icon: const Icon(Icons.info_outline, color: Colors.white),
                    tooltip: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–ø–∏–∑–æ–¥–µ',
                  ),
                ),

                const SizedBox(height: 8),

                // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                Container(
                  decoration: BoxDecoration(
                    color: Colors.black.withOpacity(0.7),
                    borderRadius: BorderRadius.circular(25),
                  ),
                  child: IconButton(
                    onPressed: _showSettings,
                    icon: const Icon(Icons.settings, color: Colors.white),
                    tooltip: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞',
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _showEpisodeInfo() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: Row(
          children: [
            const Icon(Icons.menu_book, color: Colors.orange),
            const SizedBox(width: 8),
            Expanded(
              child: Text(
                widget.episodeTitle,
                style: const TextStyle(color: Colors.white),
              ),
            ),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildInfoRow('–§–æ—Ä–º–∞—Ç', 'Comics (.comics)'),
            _buildInfoRow('–ê–≤—Ç–æ—Ä—ã', '–ò–≥–æ—Ä—å –ë–∞—Ä–∞–Ω—å–∫–æ, –ê–ª–µ–∫—Å–µ–π –ß–µ–±—ã–∫–∏–Ω'),
            _buildInfoRow('–°–µ—Ä–∏—è', '–ú–∞—Ö–∞–±—Ö–∞—Ä–∞—Ç–∞'),
            _buildInfoRow('–ü–ª–µ–µ—Ä', 'FreeDome Player'),
            if (_controller.currentContent?.metadata != null) ...[
              const SizedBox(height: 8),
              const Text(
                '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:',
                style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 4),
              if (_controller.currentContent!.metadata!['totalPages'] != null)
                _buildInfoRow(
                  '–°—Ç—Ä–∞–Ω–∏—Ü',
                  '${_controller.currentContent!.metadata!['totalPages']}',
                ),
              if (_controller.currentContent!.metadata!['duration'] != null)
                _buildInfoRow(
                  '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                  '${_controller.currentContent!.metadata!['duration']} —Å–µ–∫',
                ),
            ],
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('–ó–∞–∫—Ä—ã—Ç—å', style: TextStyle(color: Colors.blue)),
          ),
        ],
      ),
    );
  }

  void _showSettings() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        decoration: const BoxDecoration(
          color: Colors.black87,
          borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
        ),
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞',
              style: TextStyle(
                color: Colors.white,
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),

            // –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            ListTile(
              leading: const Icon(Icons.high_quality, color: Colors.blue),
              title: const Text('–ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞',
                  style: TextStyle(color: Colors.white)),
              subtitle: Text(
                '–¢–µ–∫—É—â–µ–µ: ${(_controller.config.renderQuality * 100).round()}%',
                style: const TextStyle(color: Colors.white70),
              ),
              onTap: () => _showQualitySelector(),
            ),

            // –§–æ–Ω
            ListTile(
              leading: const Icon(Icons.color_lens, color: Colors.purple),
              title: const Text('–¶–≤–µ—Ç —Ñ–æ–Ω–∞',
                  style: TextStyle(color: Colors.white)),
              subtitle: const Text('–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞',
                  style: TextStyle(color: Colors.white70)),
              onTap: () => _showBackgroundSelector(),
            ),

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–µ–µ—Ä–µ
            ListTile(
              leading: const Icon(Icons.info, color: Colors.green),
              title: const Text('–û FreeDome Player',
                  style: TextStyle(color: Colors.white)),
              onTap: () => _showPlayerInfo(),
            ),

            const SizedBox(height: 16),
          ],
        ),
      ),
    );
  }

  void _showQualitySelector() {
    Navigator.pop(context); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: const Text('–ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞',
            style: TextStyle(color: Colors.white)),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            _buildQualityOption('–ù–∏–∑–∫–æ–µ (50%)', 0.5),
            _buildQualityOption('–°—Ä–µ–¥–Ω–µ–µ (75%)', 0.75),
            _buildQualityOption('–í—ã—Å–æ–∫–æ–µ (100%)', 1.0),
            _buildQualityOption('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ (150%)', 1.5),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('–ó–∞–∫—Ä—ã—Ç—å', style: TextStyle(color: Colors.blue)),
          ),
        ],
      ),
    );
  }

  Widget _buildQualityOption(String label, double quality) {
    final isSelected = _controller.config.renderQuality == quality;

    return ListTile(
      title: Text(label, style: const TextStyle(color: Colors.white)),
      leading: Icon(
        isSelected ? Icons.radio_button_checked : Icons.radio_button_unchecked,
        color: isSelected ? Colors.blue : Colors.white70,
      ),
      onTap: () {
        final newConfig = _controller.config.copyWith(renderQuality: quality);
        _controller.updateConfig(newConfig);
        Navigator.of(context).pop();
      },
    );
  }

  void _showBackgroundSelector() {
    Navigator.pop(context); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

    final colors = [
      {'name': '–ß–µ—Ä–Ω—ã–π', 'color': 0xFF000000},
      {'name': '–¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π', 'color': 0xFF2A2A2A},
      {'name': '–¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π', 'color': 0xFF1A1A2E},
      {'name': '–¢–µ–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π', 'color': 0xFF2D1B69},
    ];

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: const Text('–¶–≤–µ—Ç —Ñ–æ–Ω–∞', style: TextStyle(color: Colors.white)),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: colors.map((colorData) {
            final isSelected =
                _controller.config.backgroundColor == colorData['color'];

            return ListTile(
              title: Text(
                colorData['name'] as String,
                style: const TextStyle(color: Colors.white),
              ),
              leading: Container(
                width: 24,
                height: 24,
                decoration: BoxDecoration(
                  color: Color(colorData['color'] as int),
                  shape: BoxShape.circle,
                  border: Border.all(
                    color: isSelected ? Colors.blue : Colors.white30,
                    width: 2,
                  ),
                ),
                child: isSelected
                    ? const Icon(Icons.check, color: Colors.white, size: 16)
                    : null,
              ),
              onTap: () {
                final newConfig = _controller.config.copyWith(
                  backgroundColor: colorData['color'] as int,
                );
                _controller.updateConfig(newConfig);
                Navigator.of(context).pop();
              },
            );
          }).toList(),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('–ó–∞–∫—Ä—ã—Ç—å', style: TextStyle(color: Colors.blue)),
          ),
        ],
      ),
    );
  }

  void _showPlayerInfo() {
    Navigator.pop(context); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: const Row(
          children: [
            Icon(Icons.play_circle_filled, color: Colors.blue),
            SizedBox(width: 8),
            Text('FreeDome Player', style: TextStyle(color: Colors.white)),
          ],
        ),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'FreeDome Player - —ç—Ç–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ–¥–∏–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤, –≤–∫–ª—é—á–∞—è –∫–æ–º–∏–∫—Å—ã, 3D –º–æ–¥–µ–ª–∏ –∏ –∫—É–ø–æ–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ü–∏–∏.',
              style: TextStyle(color: Colors.white70),
            ),
            SizedBox(height: 12),
            Text(
              '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:',
              style:
                  TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
            ),
            Text('‚Ä¢ Comics (.comics)', style: TextStyle(color: Colors.white70)),
            Text('‚Ä¢ Boranko (.boranko)',
                style: TextStyle(color: Colors.white70)),
            Text('‚Ä¢ COLLADA (.dae)', style: TextStyle(color: Colors.white70)),
            Text('‚Ä¢ OBJ (.obj)', style: TextStyle(color: Colors.white70)),
            Text('‚Ä¢ glTF (.gltf, .glb)',
                style: TextStyle(color: Colors.white70)),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('–ó–∞–∫—Ä—ã—Ç—å', style: TextStyle(color: Colors.blue)),
          ),
        ],
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 2),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 80,
            child: Text(
              '$label:',
              style: const TextStyle(
                color: Colors.white70,
                fontSize: 14,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(
                color: Colors.white,
                fontSize: 14,
              ),
            ),
          ),
        ],
      ),
    );
  }
}
